// source: sabr_response.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.sabr_response.root', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sabr_response.root = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sabr_response.root, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sabr_response.root.displayName = 'proto.sabr_response.root';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sabr_response.root.prototype.toObject = function(opt_includeInstance) {
  return proto.sabr_response.root.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sabr_response.root} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sabr_response.root.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunknumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    videoid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itag: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastmodified: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contentstartoffset: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isinitchunk: jspb.Message.getFieldWithDefault(msg, 8, 0),
    totalchunknumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ten: jspb.Message.getFieldWithDefault(msg, 10, 0),
    chunkoffsetms: jspb.Message.getFieldWithDefault(msg, 11, 0),
    partlengthms: jspb.Message.getFieldWithDefault(msg, 12, 0),
    contentsize: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sabr_response.root}
 */
proto.sabr_response.root.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sabr_response.root;
  return proto.sabr_response.root.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sabr_response.root} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sabr_response.root}
 */
proto.sabr_response.root.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunknumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideoid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastmodified(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContentstartoffset(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsinitchunk(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalchunknumber(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTen(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkoffsetms(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartlengthms(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContentsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sabr_response.root.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sabr_response.root.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sabr_response.root} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sabr_response.root.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVideoid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItag();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLastmodified();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getContentstartoffset();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPartlengthms();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getContentsize();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional int32 chunkNumber = 1;
 * @return {number}
 */
proto.sabr_response.root.prototype.getChunknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setChunknumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.clearChunknumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sabr_response.root.prototype.hasChunknumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string videoId = 2;
 * @return {string}
 */
proto.sabr_response.root.prototype.getVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setVideoid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 itag = 3;
 * @return {number}
 */
proto.sabr_response.root.prototype.getItag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setItag = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 lastModified = 4;
 * @return {number}
 */
proto.sabr_response.root.prototype.getLastmodified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setLastmodified = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 contentStartOffset = 6;
 * @return {number}
 */
proto.sabr_response.root.prototype.getContentstartoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setContentstartoffset = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 isInitChunk = 8;
 * @return {number}
 */
proto.sabr_response.root.prototype.getIsinitchunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setIsinitchunk = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.clearIsinitchunk = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sabr_response.root.prototype.hasIsinitchunk = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 totalChunkNumber = 9;
 * @return {number}
 */
proto.sabr_response.root.prototype.getTotalchunknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setTotalchunknumber = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.clearTotalchunknumber = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sabr_response.root.prototype.hasTotalchunknumber = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 ten = 10;
 * @return {number}
 */
proto.sabr_response.root.prototype.getTen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setTen = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.clearTen = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sabr_response.root.prototype.hasTen = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 chunkOffsetMs = 11;
 * @return {number}
 */
proto.sabr_response.root.prototype.getChunkoffsetms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setChunkoffsetms = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.clearChunkoffsetms = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sabr_response.root.prototype.hasChunkoffsetms = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 partLengthMs = 12;
 * @return {number}
 */
proto.sabr_response.root.prototype.getPartlengthms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setPartlengthms = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 contentSize = 14;
 * @return {number}
 */
proto.sabr_response.root.prototype.getContentsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.sabr_response.root} returns this
 */
proto.sabr_response.root.prototype.setContentsize = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


goog.object.extend(exports, proto.sabr_response);
